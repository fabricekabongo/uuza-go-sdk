/*
Product Management API

API for managing products, including adding, updating, and retrieving products and their variants.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SimpleProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimpleProduct{}

// SimpleProduct struct for SimpleProduct
type SimpleProduct struct {
	Name *string `json:"name,omitempty"`
	Price *float32 `json:"price,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	CategoryId *int32 `json:"category_id,omitempty"`
	PostedDate *time.Time `json:"posted_date,omitempty"`
	Description *string `json:"description,omitempty"`
	Images []string `json:"images,omitempty"`
	FeatureImage *string `json:"feature_image,omitempty"`
	Tag *string `json:"tag,omitempty"`
}

// NewSimpleProduct instantiates a new SimpleProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleProduct() *SimpleProduct {
	this := SimpleProduct{}
	return &this
}

// NewSimpleProductWithDefaults instantiates a new SimpleProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleProductWithDefaults() *SimpleProduct {
	this := SimpleProduct{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SimpleProduct) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SimpleProduct) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SimpleProduct) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SimpleProduct) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SimpleProduct) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *SimpleProduct) SetPrice(v float32) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *SimpleProduct) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *SimpleProduct) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *SimpleProduct) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *SimpleProduct) GetCategoryId() int32 {
	if o == nil || IsNil(o.CategoryId) {
		var ret int32
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetCategoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *SimpleProduct) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int32 and assigns it to the CategoryId field.
func (o *SimpleProduct) SetCategoryId(v int32) {
	o.CategoryId = &v
}

// GetPostedDate returns the PostedDate field value if set, zero value otherwise.
func (o *SimpleProduct) GetPostedDate() time.Time {
	if o == nil || IsNil(o.PostedDate) {
		var ret time.Time
		return ret
	}
	return *o.PostedDate
}

// GetPostedDateOk returns a tuple with the PostedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetPostedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PostedDate) {
		return nil, false
	}
	return o.PostedDate, true
}

// HasPostedDate returns a boolean if a field has been set.
func (o *SimpleProduct) HasPostedDate() bool {
	if o != nil && !IsNil(o.PostedDate) {
		return true
	}

	return false
}

// SetPostedDate gets a reference to the given time.Time and assigns it to the PostedDate field.
func (o *SimpleProduct) SetPostedDate(v time.Time) {
	o.PostedDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SimpleProduct) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SimpleProduct) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SimpleProduct) SetDescription(v string) {
	o.Description = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *SimpleProduct) GetImages() []string {
	if o == nil || IsNil(o.Images) {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *SimpleProduct) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *SimpleProduct) SetImages(v []string) {
	o.Images = v
}

// GetFeatureImage returns the FeatureImage field value if set, zero value otherwise.
func (o *SimpleProduct) GetFeatureImage() string {
	if o == nil || IsNil(o.FeatureImage) {
		var ret string
		return ret
	}
	return *o.FeatureImage
}

// GetFeatureImageOk returns a tuple with the FeatureImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetFeatureImageOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureImage) {
		return nil, false
	}
	return o.FeatureImage, true
}

// HasFeatureImage returns a boolean if a field has been set.
func (o *SimpleProduct) HasFeatureImage() bool {
	if o != nil && !IsNil(o.FeatureImage) {
		return true
	}

	return false
}

// SetFeatureImage gets a reference to the given string and assigns it to the FeatureImage field.
func (o *SimpleProduct) SetFeatureImage(v string) {
	o.FeatureImage = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *SimpleProduct) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleProduct) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *SimpleProduct) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *SimpleProduct) SetTag(v string) {
	o.Tag = &v
}

func (o SimpleProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimpleProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.PostedDate) {
		toSerialize["posted_date"] = o.PostedDate.Format("01-02-2006 15:04")
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.FeatureImage) {
		toSerialize["feature_image"] = o.FeatureImage
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableSimpleProduct struct {
	value *SimpleProduct
	isSet bool
}

func (v NullableSimpleProduct) Get() *SimpleProduct {
	return v.value
}

func (v *NullableSimpleProduct) Set(val *SimpleProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleProduct(val *SimpleProduct) *NullableSimpleProduct {
	return &NullableSimpleProduct{value: val, isSet: true}
}

func (v NullableSimpleProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


